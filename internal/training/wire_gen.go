// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/go-kratos/kratos/v2"
	"github.com/shiqinfeng1/goMono/internal/common/config"
	"github.com/shiqinfeng1/goMono/internal/common/config/training"
	"github.com/shiqinfeng1/goMono/internal/common/log"
	"github.com/shiqinfeng1/goMono/internal/common/trace"
	"github.com/shiqinfeng1/goMono/internal/common/types"
	"github.com/shiqinfeng1/goMono/internal/training/adapters"
	"github.com/shiqinfeng1/goMono/internal/training/app"
	"github.com/shiqinfeng1/goMono/internal/training/ports"
	"github.com/shiqinfeng1/goMono/internal/training/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(contextContext context.Context, srvInfo *types.SrvInfo, discovery *config.Discovery, configLog *config.Log, configTrace *config.Trace, adapter *config.Adapter, http *training.HTTP, auth *training.Auth) (*kratos.App, func(), error) {
	logger := log.New(srvInfo, configLog)
	tracerProvider := trace.New(contextContext, srvInfo, configTrace)
	repository := adapters.NewTrainingRepo(adapter, logger)
	trainerGrpc := adapters.NewTrainerGrpc(discovery)
	userGrpc := adapters.NewUserGrpc(discovery)
	application := app.NewApplication(logger, repository, trainerGrpc, userGrpc)
	httpService := service.NewHttpService(application)
	server := ports.NewHTTPServer(http, auth, logger, tracerProvider, httpService)
	kratosApp := newApp(logger, server)
	return kratosApp, func() {
	}, nil
}
