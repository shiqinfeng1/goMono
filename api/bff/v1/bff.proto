syntax = "proto3";

package bff;

option go_package = "github.com/shiqinfeng1/goMono/api/bff/v1;v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
// import "trainer/v1/trainer.proto";
import "training/v1/training.proto";

service BFF {
  rpc IsHourAvailable(IsHourAvailableRequest) returns (IsHourAvailableResponse) {}
  rpc ScheduleTraining(UpdateHourRequest) returns (google.protobuf.Empty) {}

  rpc GetTrainerAvailableHours(GetTrainerAvailableHoursRequest) returns (GetTrainerAvailableHoursRespone) {
     option (google.api.http) = {
      post: "/bff/v1/getTrainerAvailableHours"
      body: "*"
    };
  }

  rpc MakeHourAvailable(MakeHourAvailableRequest) returns (google.protobuf.Empty) {
     option (google.api.http) = {
      post: "/bff/v1/makeHourAvailable"
      body: "*"
    };
  }

  rpc MakeHourUnavailable(MakeHourUnavailableRequest) returns (google.protobuf.Empty) {
     option (google.api.http) = {
      post: "/bff/v1/makeHourUnavailable"
      body: "*"
    };
  }
  rpc GetTraining(google.protobuf.Empty) returns (training.GetTrainingResponse) {
    option (google.api.http) = {
      post: "/training/v1/getTraining"
      body: "*"
    };
  }
  rpc CreateTraining(training.CreateTrainingRequest) returns (training.CreateTrainingResponse) {
    option (google.api.http) = {
      post: "/training/v1/createTraining"
      body: "*"
    };
  }
  rpc CancelTraining(training.CancelTrainingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/training/v1/cancelTraining"
      body: "*"
    };
  }
  rpc RescheduleTraining(training.RescheduleTrainingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/training/v1/rescheduleTraining"
      body: "*"
    };
  }
  rpc ApproveRescheduleTraining(training.ApproveRescheduleTrainingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/training/v1/approveRescheduleTraining"
      body: "*"
    };
  }
  rpc RequestRescheduleTraining(training.RequestRescheduleTrainingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/training/v1/requestRescheduleTraining"
      body: "*"
    };
  }
  rpc RejectRescheduleTraining(training.RejectRescheduleTrainingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/training/v1/rejectRescheduleTraining"
      body: "*"
    };
  }
}

message IsHourAvailableRequest {
  google.protobuf.Timestamp time = 1;
}

message IsHourAvailableResponse {
  bool is_available = 1;
}

message UpdateHourRequest {
  google.protobuf.Timestamp time = 1;
}

message GetTrainerAvailableHoursRequest {
  google.protobuf.Timestamp date_from = 1;
	google.protobuf.Timestamp date_to = 2;
}

message GetTrainerAvailableHoursRespone {
  message Hour {
    bool available      = 1;      
	  bool has_training_scheduled    = 2; 
	  google.protobuf.Timestamp hour   = 3;
  }
  message Date {
    google.protobuf.Timestamp date  = 1;  
    bool Has_free_hours = 2;  
    repeated Hour hours  = 3;  
  }
  repeated Date dates = 1;
}

message MakeHourAvailableRequest {
  repeated google.protobuf.Timestamp time = 1;
}

message MakeHourUnavailableRequest {
  repeated google.protobuf.Timestamp time = 1;
}