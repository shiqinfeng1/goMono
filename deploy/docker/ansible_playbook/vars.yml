#########################################################################
# dockler私有仓库配置
#########################################################################
docker_registry_compose_file: docker_compose_docker_registry.yml  # 搭建docker私有仓库的compose文件
registry_srv_port: 8080  # docker私有仓库的服务端口 


#########################################################################
# 业务网关gateway相关配置
#########################################################################
mode: develop  # develop test product
debug: true
proxy_host: 192.168.72.84
proxy_port1: 8180
proxy_port2: 8181
proxy_addrs: :{{proxy_port1}},:{{proxy_port2}}  # 网关服务地址，可以由多个，逗号隔开
gateway_data_dir: /data/gateway
gateway_config_dir: "{{gateway_data_dir}}/config"
gateway_log_dir: "{{gateway_data_dir}}/log"
gateway_compose_file: docker_compose_gateway.yml

#########################################################################
# bff相关配置
#########################################################################
bff_host: 192.168.72.84
bff_port: 8200
bff_data_dir: /data/bff
bff_config_dir: "{{bff_data_dir}}/config"
bff_log_dir: "{{bff_data_dir}}/log"
bff_compose_file: docker_compose_bff.yml
#########################################################################
# 业务应用镜像相关配置
#########################################################################
task_migration_image: app/task-migration:latest
gateway_image: app/gateway-gomono:latest
bff_image: app/bff-gomono:latest
biz_training_image: app/biz-training:latest
biz_trainer_image: app/biz-trainer:latest
biz_images_list: 
 - "{{task_migration_image}}"
 - "{{gateway_image}}"
 - "{{bff_image}}"
 - "{{biz_training_image}}"
 - "{{biz_trainer_image}}"
#########################################################################
# 业务应用镜像相关配置
#########################################################################
biz_trainer_host: 192.168.72.84
biz_trainer_port: 8300
biz_training_host: 192.168.72.84
biz_training_port: 8400

#########################################################################
# 基础设施镜像相关配置
#########################################################################
prometheus_image: prom/prometheus:latest
jaeger_image: dockerproxy.com/jaegertracing/all-in-one:1.52
grafana_image: grafana/grafana:latest
nacos_image: nacos/nacos-server:latest
nacos_mysql_image: nacos/mysql:8.0.31
redis_image: redis:7.0-alpine
mysql_image: dockerproxy.com/bitnami/mysql:8.0.30
mysql_backup_image: registry.cn-shanghai.aliyuncs.com/shiqinfeng/mysql-cron-backup:latest

infra_images_list:   # 在线下载的基础设施的镜像列表
  - "{{prometheus_image}}"
  - "{{jaeger_image}}"
  - "{{grafana_image}}"
  - "{{nacos_image}}"
  - "{{redis_image}}"
  - "{{mysql_image}}"
  - "{{mysql_backup_image}}"

local_infra_images_list: # 本地打包的基础设施的镜像列表
  - "{{nacos_mysql_image}}"
local_infra_images_dockerfile_list: # 注意顺序保存和local_infra_images_list一致
  - "dockerfile.nacos_mysql"

delete_download_images: true  # 是否删除本地已上传到私有仓库的基础设施镜像

#########################################################################
# nacos相关配置
#########################################################################
nacos_compose_file: docker_compose_nacos.yml  # nacos1的compose文件

config_nacos_mysql: config_nacos_mysql.env # nacos使用的数据库的配置
config_nacos: config_nacos.env # nacos的配置

nacos_mysql_port: 13306 # nacos使用的mysql的服务端口
# 如果配置主机名不通， 需检查宿主机的/etc/resolv.conf的配置,确保nslookup能查到解析
nacos_mysql_host: 192.168.72.84 # 部分情况如果配置为mysql服务主机名，docker内置dns服务会解析失败，此时可以配置为ip地址； nacos使用的mysql的服务地址，该主机的dns需要配置在部署nacos的机子上, 并在ansible主机清单维护

# 如果nacos运行在统一节点，务必保证个nacos的端口号不重复
nacos_host: 192.168.72.84 # nacos1的服务地址，该主机的dns需要配置在部署nacos/prometheus的机子上, 并在ansible主机清单维护
nacos1_conn_port1: 7848
nacos1_conn_port2: 9848
nacos1_conn_port3: 9849
nacos1_srv_port: 8848
nacos2_conn_port1: 7858
nacos2_conn_port2: 9858
nacos2_conn_port3: 9859
nacos2_srv_port: 8858
nacos3_conn_port1: 7868
nacos3_conn_port2: 9868
nacos3_conn_port3: 9869
nacos3_srv_port: 8868

#########################################################################
# prometheus相关配置
#########################################################################
prometheus_compose_file: docker_compose_prometheus_grafana.yml  # prometheus的compose文件
prometheus_srv_host: 192.168.72.84  # prometheus的服务地址
prometheus_srv_port: 9090  # prometheus的服务端口
grafana_srv_port: 3000 # grafana的服务端口
config_prometheus: prometheus.yml  # prometheus的配置文件名称

#########################################################################
# 链路跟踪服务端jaeger相关配置
#########################################################################
jaeger_compose_file: docker_compose_jaeger.yml
jaeger_host: 192.168.72.84
jaeger_thrift_compact_port: 6831  # UDP agent accept jaeger.thrift over Thrift-compact protocol (used by most SDKs)
jaeger_thrift_binary_port: 6832	 # UDP agent accept jaeger.thrift over Thrift-binary protocol (used by Node.js SDK)
jaeger_agent_zipkin_port: 5775	 # UDP agent (deprecated) accept zipkin.thrift over compact Thrift protocol (used by legacy clients only)
jaeger_agent_configs_port: 5778	 # HTTP agent serve configs (sampling, etc.)
jaeger_query_port: 16686	 # HTTP query serve frontend
jaeger_collector_otlp_grpc_port: 4317	 # HTTP collector accept OpenTelemetry Protocol (OTLP) over gRPC
jaeger_collector_otlp_http_port: 4318	 # HTTP collector accept OpenTelemetry Protocol (OTLP) over HTTP
jaeger_collector_direct_port: 14268	 # HTTP collector accept jaeger.thrift directly from clients
jaeger_collector_model_port: 14250	 # HTTP collector accept model.proto
jaeger_collector_zipkin_port: 9411	 # HTTP collector Zipkin compatible endpoint (optional)

#########################################################################
# redis相关配置
#########################################################################
redis_host: 192.168.72.84
redis_srv_port: 26379
redis_slave_srv_port: 26378
redis_password: 123456
redis_data_dir: /data/redis
redis_compose_file: docker_compose_redis.yml 
redis_slave_data_dir: /data/redis-slave

#########################################################################
# 数据库相关的环境变量
#########################################################################
mysql_compose_file: docker_compose_mysql.yml 
mysql_host: 192.168.72.84 # 待备份的mysql服务地址 192.168.72.36
mysql_port: 23306 # 主mysql服务端口
mysql_data_dir: /data/mysql/data  # 主mysql数据目录
mysql_root_user: root  # 待备份的mysql服务登录用户名
mysql_root_password: Admin@1234 # 待备份的mysql服务登录密码
mysql_database: "gomono"
mysql_user: gomono
mysql_password: goMono@1234
mysql_authentication_plugin: mysql_native_password
mysql_sql_mode: STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
allow_empty_password: yes  # 不允许生产环境配置yes

mysql_slave_compose_file: docker_compose_mysql_slave.yml 
mysql_slave_host: 192.168.72.84 # 待备份的mysql服务地址 192.168.72.36
mysql_slave_port: 23316 # 从mysql服务端口
mysql_slave_data_dir: /data/mysql_slave/data # 从mysql数据目录
mysql_backup_data_dir: /data/mysql_backup # 从mysql数据本地备份目录

max_backups: 7  # mysql全量备份保留天数
init_backup: 1 # 启动时立即进行全量备份
cron_time: "0 0 2 * * *" # mysql全量备份 每天凌晨2点执行一次
cron_time_rsync: "0 0 5 * * *" # mysql全量备份远程同步  每天凌晨5点执行一次
cron_time_binlog_rsync: "32 * * * * *" # mysql增量备份远程同步 每分钟第32秒执行一次
remote_backup_ssh_ip: 192.168.72.84 # 远端backup服务器ip地址
remote_backup_ssh_port: 22 # 远端backup服务器端口号
remote_backup_pass: sqf  # 远端backup服务器用户密码
remote_backup_user: root  # 远端backup服务器用户
remote_backup_path: /root/mysql_backup/   # 远端backup全量备份路径，own必须属于REMOTE_BACKUP_USER
remote_backup_binlog_path: /root/myasql_backup_binlog/   # 远端backup增量备份路径，own必须属于REMOTE_BACKUP_USER