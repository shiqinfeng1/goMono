// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/go-kratos/kratos/v2"
	"github.com/shiqinfeng1/goMono/app/biz-trainer/internal/adapters"
	"github.com/shiqinfeng1/goMono/app/biz-trainer/internal/application"
	"github.com/shiqinfeng1/goMono/app/biz-trainer/internal/conf"
	"github.com/shiqinfeng1/goMono/app/biz-trainer/internal/ports"
	"github.com/shiqinfeng1/goMono/app/biz-trainer/internal/service"
	"github.com/shiqinfeng1/goMono/app/common/config"
	"github.com/shiqinfeng1/goMono/app/common/log"
	"github.com/shiqinfeng1/goMono/app/common/registrar"
	"github.com/shiqinfeng1/goMono/app/common/types"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(contextContext context.Context, srvInfo *types.SrvInfo, discovery *config.Discovery, configLog *config.Log, adapter *config.Adapter, http *conf.HTTP, grpc *conf.GRPC, auth *conf.Auth) (*kratos.App, func(), error) {
	logger := log.New(srvInfo, configLog)
	registryRegistrar := registrar.MustNacosRegistrar(discovery)
	cmdRepo := adapters.NewHourRepo(adapter, logger)
	queryRepository := adapters.NewDatesMysqlRepo(adapter, logger)
	applicationApplication := application.NewApplication(logger, cmdRepo, queryRepository)
	grpcService := service.NewGrpcService(applicationApplication)
	server := ports.NewGRPCServer(grpc, grpcService)
	httpService := service.NewHttpService(applicationApplication)
	httpServer := ports.NewHTTPServer(http, auth, logger, httpService)
	app := newApp(logger, registryRegistrar, server, httpServer)
	return app, func() {
	}, nil
}
