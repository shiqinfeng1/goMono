// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v3.21.12
// source: trainer/v1/trainer.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTrainerServiceIsHourAvailable = "/trainer.TrainerService/IsHourAvailable"

type TrainerServiceHTTPServer interface {
	IsHourAvailable(context.Context, *IsHourAvailableRequest) (*IsHourAvailableResponse, error)
}

func RegisterTrainerServiceHTTPServer(s *http.Server, srv TrainerServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/trainer/v1/isHourAvailable", _TrainerService_IsHourAvailable0_HTTP_Handler(srv))
}

func _TrainerService_IsHourAvailable0_HTTP_Handler(srv TrainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IsHourAvailableRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTrainerServiceIsHourAvailable)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IsHourAvailable(ctx, req.(*IsHourAvailableRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IsHourAvailableResponse)
		return ctx.Result(200, reply)
	}
}

type TrainerServiceHTTPClient interface {
	IsHourAvailable(ctx context.Context, req *IsHourAvailableRequest, opts ...http.CallOption) (rsp *IsHourAvailableResponse, err error)
}

type TrainerServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewTrainerServiceHTTPClient(client *http.Client) TrainerServiceHTTPClient {
	return &TrainerServiceHTTPClientImpl{client}
}

func (c *TrainerServiceHTTPClientImpl) IsHourAvailable(ctx context.Context, in *IsHourAvailableRequest, opts ...http.CallOption) (*IsHourAvailableResponse, error) {
	var out IsHourAvailableResponse
	pattern := "/trainer/v1/isHourAvailable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTrainerServiceIsHourAvailable))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
